#!/usr/bin/env node

const RP     = require('request-promise-native')
const Colors = require('colors')
const Moment = require('moment')
const FS     = require('fs')
const Mime   = require('mime')
const Path   = require('path')
const Url    = require('url')
const Crypto = require('crypto')
const Zlib   = require('zlib')

const TOKEN_PATH = Path.join(require('os').homedir(),'.onedrive-cli-token')
const API_BASE_URL = 'https://api.onedrive.com/v1.0/'


function padLeft(str, len) {
    return String('                '+str).slice(-len)
}


function padRight(str, len) {
    return str + ' '.repeat(len - str.length)
}


function readFile(filename) {
    return new Promise( (resolve,reject) => {
        FS.readFile(filename, (err,data) => err?reject(err):resolve(data) )
    })
}


function writeFile(filename, data) {
    return new Promise( (resolve,reject) => {
        FS.writeFile(filename, data, {encoding: null}, err => err?reject(err):resolve() )
    })
}


function print(data) {
    return new Promise( (resolve,reject) => {
        process.stdout.write(data, err => err?reject(err):resolve() )
    })
}


function unlink(path) {
    return new Promise( (resolve,reject) => {
        FS.unlink(path, err => err?reject(err):resolve() )
    })
}


function humanize(num) {
    const units = ["", "Ki", "Mi", "Gi", "Ti", "Pi"]
    var str, unit = "", div = 0
    for(;;) {
        var str = Math.round(num / Math.pow(1024, div))
        if (str <= 9999) {
            return str + units[div]
        }
        ++div
    }
}


function pp(num) { return padLeft(humanize(num), 6) }


var lazyToken = function() {
    return readFile(TOKEN_PATH)
        .then(buffer => {
            const token = Promise.resolve(buffer.toString())
            // Next time we're invoked, simply return the resolved promise
            lazyToken = function() { return token; }
            return token
        })
    }


function call(url, method, body, mime) {

    return lazyToken()
        .then(token => {
            const options = {
                uri: url,
                body: body,
                method: method || 'GET',
                headers: {
                    Authorization: 'bearer ' + token,
                    'Content-Type': mime || 'application/octet-stream',
                }
            };
            console.error(Colors.yellow(options.method), url)

            if (body instanceof Buffer) {
                options.body = Zlib.gzipSync(body)
                options.headers['Content-Encoding'] = 'gzip'
            }
            else if (typeof body === 'object') {
                if ("@content.sourceUrl" in body) {
                    options.headers.Prefer = 'respond-async'
                }
                options.body = JSON.stringify(body)
                options.headers['Content-Type'] = 'application/json'
            }

            if (!url.startsWith('https://')) {
                options.baseUrl = API_BASE_URL
            }

            return RP(options)
         })
        .then(data => {
            return data === '' ? null : JSON.parse(data)
        })
}


function getContent(url) {
    console.error(Colors.yellow('GET'), url)
    return lazyToken()
        .then(token => RP({
            baseUrl: API_BASE_URL,
            uri: url,
            headers: {
                Authorization: 'bearer '+token
            },
            encoding: null//binary
        }) )
}


function sanitize(remote) {
    return remote.replace(/^:?\/?\.?/, '/drive/root:/') + ':'
}


/*
Filesystem         Size   Used  Avail Capacity Deleted
dc1e3335a482dc20 1214Gi  164Gi 1050Gi      14%   780Mi
*/
function df() {
    return call('/drives')
        .then(result => {
            console.log(Colors.bold('Drive              Size   Used  Avail Capacity Deleted Status'))
            for(var i in result.value) {
                const drive = result.value[i]
                const capacity = Math.round(drive.quota.used*100 / drive.quota.total)+'% '
                console.log(
                    padRight(drive.id,16),
                    pp(drive.quota.total),
                    pp(drive.quota.used),
                    pp(drive.quota.remaining),
                    padLeft(capacity,9),
                    pp(drive.quota.deleted),
                    drive.status.state)
            }
        })
}



function listPage(total, cont) {
    if (typeof cont === 'undefined') {
        return total
    }

    return call(cont)
        .then(result => {
            const now = Moment()
            const threshold = 1000*60*60*24*180//180days
            for(var i in result.value) {
                const f = result.value[i]
                const m = Moment(f.lastModifiedDateTime)
                const d = "folder" in f
                var mod = d ? 'drwx' : '-rw-'
                if ("shared" in f) {
                    if ("effectiveRoles" in f.shared && f.shared.effectiveRoles.length === 1
                        && f.shared.effectiveRoles[0] === 'read') {
                        mod += d ? 'r-x' : 'r--'
                        if (f.shared.scope === 'anonymous') {
                            mod += d ? 'r-x' : 'r--'
                        }
                        else {
                            mod += '---'
                        }
                    }
                    else {
                        mod += d ? 'rwx' : 'rw-'
                        if (f.shared.scope === 'anonymous') {
                            mod += d ? 'rwx' : 'rw-'
                        }
                        else {
                            mod += '---'
                        }
                    }
                }
                else {
                    mod += '------'
                }
                const count = d ? f.folder.childCount : 1
                total += count
                console.log(
                    mod,
                    padLeft(count,3),
                    f.createdBy.user.displayName,
                    padLeft(f.size,10),
                    m.format(Math.abs(now-m)<threshold ? 'MMM DD HH:mm' : 'MMM DD  YYYY'),
                    d ? Colors.bold(Colors.blue(f.name))+'/' : f.name)
            }
            return listPage(total, result['@odata.nextLink'])
        })
}


function ls(folders) {
    if (folders.length === 0) {
        folders = ['']
    }

    //console.log(Colors.bold('Permission Cnt Owner            Size     Date         Name'))
    return folders.reduce( (prevp,folder) =>
            prevp.then(prev => listPage(prev, sanitize(folder)+'/children') ),
            Promise.resolve(0))
        .then(result => "total "+result)
}



/*
PUT /drive/root:/{parent-path}/{filename}:/content
@name.conflictBehavior   fail, replace (def), or rename.
*/
function upload(copy, from, to) {
    if (from.endsWith('/')) {
        throw new Error("Invalid source name")
    }
    if (to.endsWith('/')) {
        to = to + Path.basename(from)
    }
    to = sanitize(to)
    const mime = Mime.lookup(from)
    return readFile(from)
        .then(data => {
            return call(to+'/content?@name.conflictBehavior=fail', 'PUT', data, mime)
                .then(result => {
                    const sha1 = Crypto.createHash("sha1").update(data).digest('hex')
                    if (sha1.toUpperCase() !== result.file.hashes.sha1Hash) {
                        throw new Error("sha1Hash mismatch: "+to)
                    }
                    return result
                })
        })
        .then(result => {
            if (copy === 'move') {
                console.log(from, '=>', to, result.id)
                return unlink(from)
            }
            else {
                console.log(from, '->', to, result.id)
            }
        })
        .catch(err => {
            if (err.statusCode === 404) {
                return console.error("Skipped. Uploads larger than 100MiB are not yet supported.")
            }
            throw err
        })
}


/*
POST /drive/items/{parent-item}/children
Content-Type: application/json
Prefer: respond-async

{
  "@content.sourceUrl": "http://wscont2.apps.microsoft.com/winstore/1x/e33e38d9-d138-42a1-b252-27da1924ca87/Screenshot.225037.100000.jpg",
  "name": "halo-screenshot.jpg",
  "file": { }
}
*/
function wget(args) {
    if (args.length < 2) {
        console.error("usage: wget url target")
    }
    else {
        var to = args.pop()
        const from = args[0].startsWith('http') ? args[0] : "http://" + args[0]
        const data = {
            "@content.sourceUrl": from,
            name: Path.basename(to),
            file: { }
        }
        if (data.name === '' || to.endsWith('/')) {
            throw new Error("Invalid target name")
        }
        var path = Path.dirname(to+"hack")
        to = sanitize(to)
        path = sanitize(path)
        return call(path+'/children', 'POST', data)
            .then(result => {
                console.log(from, '-->', to)
            })
    }
}


/*
GET /drive/root:/{path and filename}:/content
*/
function download(copy, from, to) {
    if (from.endsWith('/')) {
        throw new Error("Invalid source name")
    }
    if (typeof to === 'undefined' || to === '.' || to === '') {
        to = './'
    }
    if (to.endsWith('/')) {
        to = to + Path.basename(from)
    }
    from = sanitize(from)
    return getContent(from+'/content')
        .then(data => writeFile(to, data))
        .then(result => {
            if (copy === 'move') {
                console.log(from, '=>', to)
                return rm(from)
            }
            else {
                console.log(from, '->', to)
            }
        })
}



function cp_mv(copy, args, to) {

    if (args[0].startsWith(':/') && to.startsWith(':/')) {
        throw new Error(`Remote ${copy} is not implemented.`)
    }
    else if (args[0].startsWith('./') && to.startsWith('./')) {
        throw new Error(`Local ${copy} is not implemented.`)
    }

    if (args[0].startsWith('./') || to.startsWith(':/')) {
        // from local to onedrive
        return args.reduce( (prevp,cur) => prevp.then(_ => upload(copy, cur, to)), Promise.resolve(0))
    }
    else if (args[0].startsWith(':/') || to.startsWith('./') || to === '.') {
        // from onedrive to local
        return args.reduce( (prevp,cur) => prevp.then(_ => download(copy, cur, to)), Promise.resolve(0))
    }
    else {
        throw new Error('Use ./ or :/ path prefix for local or remote paths.')
    }
}


function cp_many(total, cont, to) {
    if (typeof cont === 'undefined') {
        return total
    }
    return call(cont)
        .then(result => {
            // TODO: copy by Item ID instead of path
            const files = result.value.map(f => f.parentReference.path.replace('/drive/root','') + '/' + f.name)
            return cp_mv('copy', files, to)
                .then(count => cp_many(total+count, result['@odata.nextLink']))
        })
}

function cp(args) {
    if (args.length < 2) {
        console.error("usage: cp [-R] source target")
        console.error("       cp [-R] source ... directory")
    }
    else {
        const to = args.pop()
        if (args[0] !== '-R') {
            return cp_mv('copy', args, to)
        }

        // Recursive copy
        return args.slice(1).reduce( (prevp,folder) =>
            prevp.then(prev => cp_many(prev, sanitize(folder)+'/children', to) ),
            Promise.resolve(0))
    }
}


function rm(args) {
    if (args.length < 1) {
        console.error("usage: rm file ...")
    }
    else {
        throw new Error("Remove is not implemented")
    }
}


function mv(args) {
    if (args.length < 2) {
        console.error("usage: mv source target")
        console.error("       mv source ... directory")
    }
    else {
        const to = args.pop()
        return cp_mv('move', args, to)
    }
}


function cat1(remote) {
    remote = sanitize(remote)
    return getContent(remote+'/content')
        .then(data => print(data) )
}


function cat(args) {
    if (args.length < 1) {
        console.error("usage: cat file ...")
    }
    else {
        return args.reduce( (prevp,cur) => prevp.then(_ => cat1(cur)), Promise.resolve())
    }
}


function loginUrl() {
    console.log("\nBrowse to",
        Colors.underline("https://login.live.com/oauth20_authorize.srf?client_id=0000000040197E82&scope=onedrive.readwrite&response_type=token&redirect_uri=http%3A%2F%2Fblog.enuma.io%2Fonedrive-cli%2Foauthcallbackhandler.html") )
}


function login(args) {
    const token = args.pop()
    if (typeof token === 'string') {
        return writeFile(TOKEN_PATH, token)
            .then(_ => "Access token was saved to "+TOKEN_PATH)
    }
    else {
        console.error("usage: login access_token")
        loginUrl()
    }
}


function ln(args) {
    if (args.length !== 1) {
        console.error("usage: ln file")
    }
    else {
        var remote = sanitize(args[0])
        return call(remote+'/action.createLink', 'POST', {"type":"view"})
            .then(result => {
                console.log(Colors.underline(result.link.webUrl))
            })
    }
}


function chmod1(mode, remote) {
    remote = sanitize(remote)
    return call(remote+'/permissions')
        .then(result => {
            // +w  x        POST (todo)
            // +w  read     PATCH (todo)
            // +w  write    NOP
            // -w  write    PATCH
            // -w  read     NOP
            // -rw write    DELETE
            // -rw read     DELETE
            return result.value.reduce( (prevp,cur) => prevp.then(_ => {
                if (mode === '-rw') {
                    return call('/drive/root'+remote+':/permissions/'+cur.id, 'DELETE')
                }
                else if (cur.roles[0] === 'write') {
                    // FIXME: generic 'edit' links cannot be patched to be read only
                    return call('/drive/root'+remote+':/permissions/'+cur.id, 'PATCH', {roles:["read"]})
                }
            }), Promise.resolve())
        })
        .then(s => s === null ? "OK" : "Nothing was changed")
}


function chmod(args) {
    if (args.length < 2) {
        console.error("usage: chmod mode file ...")
    }
    else {
        var mode = args[0]
        switch (mode) {

        case '0600':
        case '0700':
        case '600':
        case '700':
        case 'g-rw':
        case 'o-rw':
        case 'go-rw':
        case 'og-rw':
        case '-rw':
            mode = '-rw'
            break

        case '0644':
        case '0744':
        case '644':
        case '744':
        case 'g-w':
        case 'o-w':
        case 'go-w':
        case 'og-w':
        case '-w':
            mode = '-w'
            break

        default:
            console.error("chmod: Invalid file mode:", mode)
            return
        }

        return args.slice(1).reduce( (prevp,cur) => prevp.then(_ => chmod1(mode, cur)), Promise.resolve())
    }
}


function sendmail1(email, file) {
    const payload = {
        "requireSignIn": "true",
        "sendInvitation": "true",
        "roles": [ "write"],
        "recipients": [
          { "email": email }
        ],
        // "message": "You were invited by x to access y"
    }
    const remote = sanitize(file)
    return call(remote+'/action.invite', 'POST', payload)
        .then(result => {
            console.log(JSON.stringify(result, undefined, 2))
        })
}


function sendmail(args) {
    if (args.length < 2) {
        console.error("usage: sendmail file recipient ...")
    }
    else {
        const file = args[0]
        return args.slice(1).reduce( (prevp,cur) => prevp.then(_ => sendmail1(cur, file)), Promise.resolve())
    }
}


function getItem(file) {
    const remote = sanitize(file)
    return call(remote)
}


function stat1(file) {
    return getItem(file)
        .then(result => {
            console.log(JSON.stringify(result, undefined, 2))
        })
}


function stat(args) {
    if (args.length === 0) {
        args = ['']
    }
    return args.reduce( (prevp,cur) => prevp.then(_ => stat1(cur)), Promise.resolve())
}


function main(argv) {

    switch (argv[2]) {

    case undefined:
    case 'help':
        console.log(Colors.bold("\nOneDrive Command Line Interface (c) Enuma Technologies Limited"))
        console.log("\nusage: onedrive COMMAND [arguments]\n\ncommands: cat chmod cp df help sendmail ln login ls mv rm stat wget")
        return

    case 'cat':
        return cat(argv.slice(3))

    case 'wget':
        return wget(argv.slice(3))

    case 'ls':
        return ls(argv.slice(3))

    case 'df':
        return df()

    case 'cp':
        return cp(argv.slice(3))

    case 'mv':
        return mv(argv.slice(3))

    case 'rm':
        return rm(argv.slice(3))

    case 'ln':
        return ln(argv.slice(3))

    case 'login':
        return login(argv.slice(3))

    case 'chmod':
        return chmod(argv.slice(3))

    case 'stat':
        return stat(argv.slice(3))

    case 'sendmail':
        return sendmail(argv.slice(3))

    default:
        throw new Error("Unknown command: "+argv[2])
    }
}


Promise.resolve()
    .then(_ => main(process.argv) )
    .then(result => {
        if (typeof result !== 'undefined') {
            console.log(Colors.green(result))
        }
    })
    .catch(err => {
        console.error(Colors.red(err))
        // Special error handling case for fatal login failures
        if (err.statusCode === 401 || err.path === TOKEN_PATH) {
            loginUrl()
            // Exit with -1 to ensure xargs stops invoking us
            process.exit(-1)
        }
        else {
            process.exit(1)
        }
    })
